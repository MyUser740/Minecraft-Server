<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="title_ServerAdvantages" xml:space="preserve">
    <value>我們的Minecraft服務器優勢</value>
  </data>
  <data name="adv_1" xml:space="preserve">
    <value>高速服務器</value>
  </data>
  <data name="adv_2" xml:space="preserve">
    <value>隱私</value>
  </data>
  <data name="adv_3" xml:space="preserve">
    <value>最佳社區</value>
  </data>
  <data name="adv_4" xml:space="preserve">
    <value>託管24/7</value>
  </data>
  <data name="gamemode_Title" xml:space="preserve">
    <value>遊戲模式</value>
  </data>
  <data name="gamemode_Subtitle" xml:space="preserve">
    <value>我们的世界服務器中可用的遊戲模式</value>
  </data>
  <data name="gamode_surv_section" xml:space="preserve">
    <value>生存</value>
  </data>
  <data name="gamemode_surv_content" xml:space="preserve">
    <value>生存模式是Minecraft中的主要遊戲模式之一。玩家必須收集資源，建造建築物，與暴民作戰，進食並探索世界，才能蓬勃發展和生存。在“基岩版”中，玩家可能會在不使用作弊功能，關閉附加功能和關閉主機特權的情況下玩“生存模式”時在未設置為“平坦”的世界中獲得成就。如果玩家在創意模式下創建了一個世界，然後在生存模式下加載了該世界，則該玩家無法在該世界上獲得成就。在《我的世界》中，生存的主要目標是生存，建立，探索和玩樂，但生存中的一個可選目標是擊敗Ender Dragon和Wither。在生存中，玩家有一個清單來收集物品。與“創意”模式不同，所有“方塊”都需要一定的時間才能打破，在“創意”模式下，您可以立即破壞方塊。這些項目可用於配方中以創建工具，包括（鎬，斧，劍，Ho，鏟）和其他項目。單擊左下角的食譜書，也可以更輕鬆地訪問食譜。此過程稱為製作。大多數手工食譜都需要一個手工桌子。有些物品無法通過正常加工獲得，需要使用爐子進行加工。存在用於其他用途的各種其他製作工位，例如釀造，維修和附魔。在生存模式下，玩家可以從環境（跌落傷害，窒息和熔岩）和敵對的暴民（除非在和平的情況下玩，敵對的暴民被禁用）受到傷害。受到足夠傷害的玩家死亡並返回到生成點。如果啟用了作弊功能，則玩家可以使用/ gamemode生存命令切換到生存模式，但無法獲得成就。</value>
  </data>
  <data name="gamode_crtv_section" xml:space="preserve">
    <value>創意性</value>
  </data>
  <data name="gamemode_crtv_content" xml:space="preserve">
    <value>創作模式是Minecraft中的主要遊戲模式之一。創新模式剝奪了Minecraft的生存空間，並允許玩家輕鬆地創建和破壞建築物和機制，包括無限使用方塊和飛行。它還會更改背景音樂。在“創作”模式下，玩家沒有健康​​或飢餓欄來妨礙他們的建築物（儘管仍然可以進食，並且如果受到空洞的傷害，玩家的健康仍然會下降）。創作模式允許玩家立即摧毀所有方塊（包括通常堅不可摧的方塊，例如基岩和末端傳送門框架），前提是他們沒有握住劍，三叉戟或調試棒。但是，這些塊不會丟失，必須由廣告資源獲取。創意模式使玩家能夠飛行。要激活飛行，請雙擊跳轉鍵。使用跳轉鍵向上移動，使用潛行鍵向下移動，使用移動鍵，默認為WASD移動。玩家可以通過再次雙擊跳動使其掉落到地面來禁用空中飛行。飛行時觸摸地面會禁止在Java Edition中飛行，但在Bedrock Edition中則不會。進入礦車或床上不會阻止飛行。</value>
  </data>
  <data name="gamode_advn_section" xml:space="preserve">
    <value>冒險</value>
  </data>
  <data name="gamode_advn_content" xml:space="preserve">
    <value>冒險模式是一種用於玩家創建地圖的遊戲模式，限制了Minecraft中的某些遊戲玩法。在這種模式下，玩家無法使用任何工具直接銷毀任何方塊或放置任何方塊，以避免破壞冒險地圖或悲傷的服務器。冒險模式只能通過命令或遊戲模式選擇器訪問。冒險模式與生存模式相似，因為玩家會受到周圍環境的傷害，有可能死亡，並且玩家必須控制飢餓。但是，它在許多方面也有所不同。在Java Edition中，只能使用帶有CanDestroy NBT標籤的物品/工具來破壞積木，而不能被玩家的拳頭破壞。同樣，塊需要放置CanPlaceOn NBT標籤。在基岩版中，類似地，需要can_destroy和can_place_on NBT標籤來銷毀和放置塊。但是，玩家可以通過其他方式利用環境-包括與暴民和其他實體互動（例如，殺死它們），打開或關閉紅石機制（例如槓桿）以及與村民交易。另外，玩家能夠像在其他任何遊戲模式中一樣製作物品。另一個功能是，玩家無論身在何處，都始終精確地在世界的生成點上生成-與生存模式不同，生存模式下，玩家可以在特定網格內的任何位置生成。</value>
  </data>
  <data name="gamemode_hrdc_section" xml:space="preserve">
    <value>鐵桿</value>
  </data>
  <data name="gamemode_hrdc_content" xml:space="preserve">
    <value>Hardcore是Java Edition Survival的專有變體。 在這種模式下，世界被鎖定為困難難度，玩家被殺死後無法重生。 硬核模式的主要特徵是，玩家沒有像其他遊戲模式那樣在死亡時重生的選項。 取而代之的是，死亡屏幕上有兩個按鈕：“主題世界”和“標題屏幕”。 “ Spectate world”將玩家設置為“觀眾”模式，並在世界的生成點重生該玩家，從而使他們只能在該模式下查看和探索世界。 “標題屏幕”按鈕只是將播放器引導至主菜單屏幕； 重新打開世界只會使玩家回到與以前相同的死亡屏幕。 此外，硬核模式世界僅限於困難難度。 創建“硬核”模式世界時，“啟用作弊”和“獎勵寶箱”世界選項將鎖定為OFF。 在世界選擇菜單上，“硬核模式”世界顯示深紅色文本，顯示為“硬核模式！”。</value>
  </data>
  <data name="letsPlay" xml:space="preserve">
    <value>讓我們玩！</value>
  </data>
  <data name="shop_title" xml:space="preserve">
    <value>您想升級/購買等級嗎？</value>
  </data>
  <data name="shop_link" xml:space="preserve">
    <value>到這裡</value>
  </data>
  <data name="thx1" xml:space="preserve">
    <value>好吧……沒有我，我的世界就不存在了。 感謝您的支持</value>
  </data>
  <data name="thx2" xml:space="preserve">
    <value>非常感謝T-XIvIN社區開發此網站。</value>
  </data>
  <data name="thx_title" xml:space="preserve">
    <value>競標感謝</value>
  </data>
</root>